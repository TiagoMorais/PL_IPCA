
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "right=left+-left*rightsimetricoEM ESCREVE FAZER FIM FIMPARA NUM PARA RANGE SEPARADOR STRING VAR VARID init : block block : block instruction  block : instruction instruction : assign \n                        | declare_var\n                        | print print : ESCREVE E FIM\n                  | ESCREVE STRING FIM E : E '+' E  \n                | E '-' E \n                | E '*' E       E : '-' E   %prec simetrico  E : '(' E ')'  E :  NUM   E :  VARID   instruction : PARA VARID EM RANGE FAZER block FIMPARA FIM  declare_var : VAR VARID FIM assign : VAR VARID '=' E FIM"
    
_lr_action_items = {'PARA':([0,2,3,4,5,6,10,21,22,26,35,36,37,39,],[7,7,-3,-4,-5,-6,-2,-17,-7,-8,7,-18,7,-16,]),'VAR':([0,2,3,4,5,6,10,21,22,26,35,36,37,39,],[8,8,-3,-4,-5,-6,-2,-17,-7,-8,8,-18,8,-16,]),'ESCREVE':([0,2,3,4,5,6,10,21,22,26,35,36,37,39,],[9,9,-3,-4,-5,-6,-2,-17,-7,-8,9,-18,9,-16,]),'$end':([1,2,3,4,5,6,10,21,22,26,36,39,],[0,-1,-3,-4,-5,-6,-2,-17,-7,-8,-18,-16,]),'FIMPARA':([3,4,5,6,10,21,22,26,36,37,39,],[-3,-4,-5,-6,-2,-17,-7,-8,-18,38,-16,]),'VARID':([7,8,9,15,16,20,23,24,25,],[11,12,18,18,18,18,18,18,18,]),'STRING':([9,],[14,]),'-':([9,13,15,16,17,18,20,23,24,25,27,28,30,31,32,33,34,],[15,24,15,15,-14,-15,15,15,15,15,-12,24,24,-9,-10,-11,-13,]),'(':([9,15,16,20,23,24,25,],[16,16,16,16,16,16,16,]),'NUM':([9,15,16,20,23,24,25,],[17,17,17,17,17,17,17,]),'EM':([11,],[19,]),'=':([12,],[20,]),'FIM':([12,13,14,17,18,27,30,31,32,33,34,38,],[21,22,26,-14,-15,-12,36,-9,-10,-11,-13,39,]),'+':([13,17,18,27,28,30,31,32,33,34,],[23,-14,-15,-12,23,23,-9,-10,-11,-13,]),'*':([13,17,18,27,28,30,31,32,33,34,],[25,-14,-15,-12,25,25,25,25,-11,-13,]),')':([17,18,27,28,31,32,33,34,],[-14,-15,-12,34,-9,-10,-11,-13,]),'RANGE':([19,],[29,]),'FAZER':([29,],[35,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'init':([0,],[1,]),'block':([0,35,],[2,37,]),'instruction':([0,2,35,37,],[3,10,3,10,]),'assign':([0,2,35,37,],[4,4,4,4,]),'declare_var':([0,2,35,37,],[5,5,5,5,]),'print':([0,2,35,37,],[6,6,6,6,]),'E':([9,15,16,20,23,24,25,],[13,27,28,30,31,32,33,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> init","S'",1,None,None,None),
  ('init -> block','init',1,'p_init','EscreveGrammar.py',34),
  ('block -> block instruction','block',2,'p_block','EscreveGrammar.py',39),
  ('block -> instruction','block',1,'p_block_end','EscreveGrammar.py',45),
  ('instruction -> assign','instruction',1,'p_instruction','EscreveGrammar.py',49),
  ('instruction -> declare_var','instruction',1,'p_instruction','EscreveGrammar.py',50),
  ('instruction -> print','instruction',1,'p_instruction','EscreveGrammar.py',51),
  ('print -> ESCREVE E FIM','print',3,'p_print','EscreveGrammar.py',55),
  ('print -> ESCREVE STRING FIM','print',3,'p_print','EscreveGrammar.py',56),
  ('E -> E + E','E',3,'p_expr_op','EscreveGrammar.py',72),
  ('E -> E - E','E',3,'p_expr_op','EscreveGrammar.py',73),
  ('E -> E * E','E',3,'p_expr_op','EscreveGrammar.py',74),
  ('E -> - E','E',2,'p_expr_sinalmenos','EscreveGrammar.py',78),
  ('E -> ( E )','E',3,'p_expr_pare','EscreveGrammar.py',82),
  ('E -> NUM','E',1,'p_expr_num','EscreveGrammar.py',88),
  ('E -> VARID','E',1,'p_expr_var','EscreveGrammar.py',92),
  ('instruction -> PARA VARID EM RANGE FAZER block FIMPARA FIM','instruction',8,'p_ciclos','EscreveGrammar.py',115),
  ('declare_var -> VAR VARID FIM','declare_var',3,'p_create_var','EscreveGrammar.py',151),
  ('assign -> VAR VARID = E FIM','assign',5,'p_assign_var','EscreveGrammar.py',155),
]
