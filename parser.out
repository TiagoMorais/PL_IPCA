Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> init
Rule 1     init -> block
Rule 2     block -> instruction block
Rule 3     block -> instruction
Rule 4     instruction -> assign
Rule 5     instruction -> declare_var
Rule 6     initial -> comando
Rule 7     initial -> assign
Rule 8     initial -> declare_var
Rule 9     comando -> ESCREVE lista_strings FIM
Rule 10    E -> E + E
Rule 11    E -> E - E
Rule 12    E -> E * E
Rule 13    E -> - E
Rule 14    E -> ( E )
Rule 15    E -> NUM
Rule 16    E -> VARID
Rule 17    lista_strings -> lista_strings SEPARADOR E
Rule 18    lista_strings -> lista_strings SEPARADOR NUM
Rule 19    lista_strings -> lista_strings SEPARADOR STRING
Rule 20    lista_strings -> STRING
Rule 21    lista_strings -> NUM
Rule 22    lista_strings -> E
Rule 23    instruction -> PARA VARID EM RANGE FAZER block FIMPARA FIM
Rule 24    INST -> INST initial
Rule 25    INST -> initial
Rule 26    declare_var -> VAR VARID FIM
Rule 27    assign -> VAR VARID = E FIM

Terminals, with rules where they appear

(                    : 14
)                    : 14
*                    : 12
+                    : 10
-                    : 11 13
=                    : 27
EM                   : 23
ESCREVE              : 9
FAZER                : 23
FIM                  : 9 23 26 27
FIMPARA              : 23
NUM                  : 15 18 21
PARA                 : 23
RANGE                : 23
SEPARADOR            : 17 18 19
STRING               : 19 20
VAR                  : 26 27
VARID                : 16 23 26 27
error                : 

Nonterminals, with rules where they appear

E                    : 10 10 11 11 12 12 13 14 17 22 27
INST                 : 24
assign               : 4 7
block                : 1 2 23
comando              : 6
declare_var          : 5 8
init                 : 0
initial              : 24 25
instruction          : 2 3
lista_strings        : 9 17 18 19

Parsing method: LALR

state 0

    (0) S' -> . init
    (1) init -> . block
    (2) block -> . instruction block
    (3) block -> . instruction
    (4) instruction -> . assign
    (5) instruction -> . declare_var
    (23) instruction -> . PARA VARID EM RANGE FAZER block FIMPARA FIM
    (27) assign -> . VAR VARID = E FIM
    (26) declare_var -> . VAR VARID FIM

    PARA            shift and go to state 6
    VAR             shift and go to state 7

    init                           shift and go to state 1
    block                          shift and go to state 2
    instruction                    shift and go to state 3
    assign                         shift and go to state 4
    declare_var                    shift and go to state 5

state 1

    (0) S' -> init .



state 2

    (1) init -> block .

    $end            reduce using rule 1 (init -> block .)


state 3

    (2) block -> instruction . block
    (3) block -> instruction .
    (2) block -> . instruction block
    (3) block -> . instruction
    (4) instruction -> . assign
    (5) instruction -> . declare_var
    (23) instruction -> . PARA VARID EM RANGE FAZER block FIMPARA FIM
    (27) assign -> . VAR VARID = E FIM
    (26) declare_var -> . VAR VARID FIM

    $end            reduce using rule 3 (block -> instruction .)
    FIMPARA         reduce using rule 3 (block -> instruction .)
    PARA            shift and go to state 6
    VAR             shift and go to state 7

    instruction                    shift and go to state 3
    block                          shift and go to state 8
    assign                         shift and go to state 4
    declare_var                    shift and go to state 5

state 4

    (4) instruction -> assign .

    PARA            reduce using rule 4 (instruction -> assign .)
    VAR             reduce using rule 4 (instruction -> assign .)
    $end            reduce using rule 4 (instruction -> assign .)
    FIMPARA         reduce using rule 4 (instruction -> assign .)


state 5

    (5) instruction -> declare_var .

    PARA            reduce using rule 5 (instruction -> declare_var .)
    VAR             reduce using rule 5 (instruction -> declare_var .)
    $end            reduce using rule 5 (instruction -> declare_var .)
    FIMPARA         reduce using rule 5 (instruction -> declare_var .)


state 6

    (23) instruction -> PARA . VARID EM RANGE FAZER block FIMPARA FIM

    VARID           shift and go to state 9


state 7

    (27) assign -> VAR . VARID = E FIM
    (26) declare_var -> VAR . VARID FIM

    VARID           shift and go to state 10


state 8

    (2) block -> instruction block .

    $end            reduce using rule 2 (block -> instruction block .)
    FIMPARA         reduce using rule 2 (block -> instruction block .)


state 9

    (23) instruction -> PARA VARID . EM RANGE FAZER block FIMPARA FIM

    EM              shift and go to state 11


state 10

    (27) assign -> VAR VARID . = E FIM
    (26) declare_var -> VAR VARID . FIM

    =               shift and go to state 12
    FIM             shift and go to state 13


state 11

    (23) instruction -> PARA VARID EM . RANGE FAZER block FIMPARA FIM

    RANGE           shift and go to state 14


state 12

    (27) assign -> VAR VARID = . E FIM
    (10) E -> . E + E
    (11) E -> . E - E
    (12) E -> . E * E
    (13) E -> . - E
    (14) E -> . ( E )
    (15) E -> . NUM
    (16) E -> . VARID

    -               shift and go to state 17
    (               shift and go to state 18
    NUM             shift and go to state 19
    VARID           shift and go to state 15

    E                              shift and go to state 16

state 13

    (26) declare_var -> VAR VARID FIM .

    PARA            reduce using rule 26 (declare_var -> VAR VARID FIM .)
    VAR             reduce using rule 26 (declare_var -> VAR VARID FIM .)
    $end            reduce using rule 26 (declare_var -> VAR VARID FIM .)
    FIMPARA         reduce using rule 26 (declare_var -> VAR VARID FIM .)


state 14

    (23) instruction -> PARA VARID EM RANGE . FAZER block FIMPARA FIM

    FAZER           shift and go to state 20


state 15

    (16) E -> VARID .

    FIM             reduce using rule 16 (E -> VARID .)
    +               reduce using rule 16 (E -> VARID .)
    -               reduce using rule 16 (E -> VARID .)
    *               reduce using rule 16 (E -> VARID .)
    )               reduce using rule 16 (E -> VARID .)


state 16

    (27) assign -> VAR VARID = E . FIM
    (10) E -> E . + E
    (11) E -> E . - E
    (12) E -> E . * E

    FIM             shift and go to state 21
    +               shift and go to state 22
    -               shift and go to state 23
    *               shift and go to state 24


state 17

    (13) E -> - . E
    (10) E -> . E + E
    (11) E -> . E - E
    (12) E -> . E * E
    (13) E -> . - E
    (14) E -> . ( E )
    (15) E -> . NUM
    (16) E -> . VARID

    -               shift and go to state 17
    (               shift and go to state 18
    NUM             shift and go to state 19
    VARID           shift and go to state 15

    E                              shift and go to state 25

state 18

    (14) E -> ( . E )
    (10) E -> . E + E
    (11) E -> . E - E
    (12) E -> . E * E
    (13) E -> . - E
    (14) E -> . ( E )
    (15) E -> . NUM
    (16) E -> . VARID

    -               shift and go to state 17
    (               shift and go to state 18
    NUM             shift and go to state 19
    VARID           shift and go to state 15

    E                              shift and go to state 26

state 19

    (15) E -> NUM .

    FIM             reduce using rule 15 (E -> NUM .)
    +               reduce using rule 15 (E -> NUM .)
    -               reduce using rule 15 (E -> NUM .)
    *               reduce using rule 15 (E -> NUM .)
    )               reduce using rule 15 (E -> NUM .)


state 20

    (23) instruction -> PARA VARID EM RANGE FAZER . block FIMPARA FIM
    (2) block -> . instruction block
    (3) block -> . instruction
    (4) instruction -> . assign
    (5) instruction -> . declare_var
    (23) instruction -> . PARA VARID EM RANGE FAZER block FIMPARA FIM
    (27) assign -> . VAR VARID = E FIM
    (26) declare_var -> . VAR VARID FIM

    PARA            shift and go to state 6
    VAR             shift and go to state 7

    block                          shift and go to state 27
    instruction                    shift and go to state 3
    assign                         shift and go to state 4
    declare_var                    shift and go to state 5

state 21

    (27) assign -> VAR VARID = E FIM .

    PARA            reduce using rule 27 (assign -> VAR VARID = E FIM .)
    VAR             reduce using rule 27 (assign -> VAR VARID = E FIM .)
    $end            reduce using rule 27 (assign -> VAR VARID = E FIM .)
    FIMPARA         reduce using rule 27 (assign -> VAR VARID = E FIM .)


state 22

    (10) E -> E + . E
    (10) E -> . E + E
    (11) E -> . E - E
    (12) E -> . E * E
    (13) E -> . - E
    (14) E -> . ( E )
    (15) E -> . NUM
    (16) E -> . VARID

    -               shift and go to state 17
    (               shift and go to state 18
    NUM             shift and go to state 19
    VARID           shift and go to state 15

    E                              shift and go to state 28

state 23

    (11) E -> E - . E
    (10) E -> . E + E
    (11) E -> . E - E
    (12) E -> . E * E
    (13) E -> . - E
    (14) E -> . ( E )
    (15) E -> . NUM
    (16) E -> . VARID

    -               shift and go to state 17
    (               shift and go to state 18
    NUM             shift and go to state 19
    VARID           shift and go to state 15

    E                              shift and go to state 29

state 24

    (12) E -> E * . E
    (10) E -> . E + E
    (11) E -> . E - E
    (12) E -> . E * E
    (13) E -> . - E
    (14) E -> . ( E )
    (15) E -> . NUM
    (16) E -> . VARID

    -               shift and go to state 17
    (               shift and go to state 18
    NUM             shift and go to state 19
    VARID           shift and go to state 15

    E                              shift and go to state 30

state 25

    (13) E -> - E .
    (10) E -> E . + E
    (11) E -> E . - E
    (12) E -> E . * E

    FIM             reduce using rule 13 (E -> - E .)
    +               reduce using rule 13 (E -> - E .)
    -               reduce using rule 13 (E -> - E .)
    *               reduce using rule 13 (E -> - E .)
    )               reduce using rule 13 (E -> - E .)

  ! +               [ shift and go to state 22 ]
  ! -               [ shift and go to state 23 ]
  ! *               [ shift and go to state 24 ]


state 26

    (14) E -> ( E . )
    (10) E -> E . + E
    (11) E -> E . - E
    (12) E -> E . * E

    )               shift and go to state 31
    +               shift and go to state 22
    -               shift and go to state 23
    *               shift and go to state 24


state 27

    (23) instruction -> PARA VARID EM RANGE FAZER block . FIMPARA FIM

    FIMPARA         shift and go to state 32


state 28

    (10) E -> E + E .
    (10) E -> E . + E
    (11) E -> E . - E
    (12) E -> E . * E

    FIM             reduce using rule 10 (E -> E + E .)
    +               reduce using rule 10 (E -> E + E .)
    -               reduce using rule 10 (E -> E + E .)
    )               reduce using rule 10 (E -> E + E .)
    *               shift and go to state 24

  ! *               [ reduce using rule 10 (E -> E + E .) ]
  ! +               [ shift and go to state 22 ]
  ! -               [ shift and go to state 23 ]


state 29

    (11) E -> E - E .
    (10) E -> E . + E
    (11) E -> E . - E
    (12) E -> E . * E

    FIM             reduce using rule 11 (E -> E - E .)
    +               reduce using rule 11 (E -> E - E .)
    -               reduce using rule 11 (E -> E - E .)
    )               reduce using rule 11 (E -> E - E .)
    *               shift and go to state 24

  ! *               [ reduce using rule 11 (E -> E - E .) ]
  ! +               [ shift and go to state 22 ]
  ! -               [ shift and go to state 23 ]


state 30

    (12) E -> E * E .
    (10) E -> E . + E
    (11) E -> E . - E
    (12) E -> E . * E

    FIM             reduce using rule 12 (E -> E * E .)
    +               reduce using rule 12 (E -> E * E .)
    -               reduce using rule 12 (E -> E * E .)
    *               reduce using rule 12 (E -> E * E .)
    )               reduce using rule 12 (E -> E * E .)

  ! +               [ shift and go to state 22 ]
  ! -               [ shift and go to state 23 ]
  ! *               [ shift and go to state 24 ]


state 31

    (14) E -> ( E ) .

    FIM             reduce using rule 14 (E -> ( E ) .)
    +               reduce using rule 14 (E -> ( E ) .)
    -               reduce using rule 14 (E -> ( E ) .)
    *               reduce using rule 14 (E -> ( E ) .)
    )               reduce using rule 14 (E -> ( E ) .)


state 32

    (23) instruction -> PARA VARID EM RANGE FAZER block FIMPARA . FIM

    FIM             shift and go to state 33


state 33

    (23) instruction -> PARA VARID EM RANGE FAZER block FIMPARA FIM .

    PARA            reduce using rule 23 (instruction -> PARA VARID EM RANGE FAZER block FIMPARA FIM .)
    VAR             reduce using rule 23 (instruction -> PARA VARID EM RANGE FAZER block FIMPARA FIM .)
    $end            reduce using rule 23 (instruction -> PARA VARID EM RANGE FAZER block FIMPARA FIM .)
    FIMPARA         reduce using rule 23 (instruction -> PARA VARID EM RANGE FAZER block FIMPARA FIM .)

