Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> init
Rule 1     init -> block
Rule 2     block -> block instruction
Rule 3     block -> instruction
Rule 4     instruction -> assign
Rule 5     instruction -> declare_var
Rule 6     instruction -> print
Rule 7     instruction -> function
Rule 8     instruction -> return
Rule 9     instruction -> func_call
Rule 10    print -> ESCREVE E FIM
Rule 11    print -> ESCREVE STRING FIM
Rule 12    E -> E + E
Rule 13    E -> E - E
Rule 14    E -> E * E
Rule 15    E -> - E
Rule 16    E -> ( E )
Rule 17    E -> NUM
Rule 18    E -> VARID
Rule 19    instruction -> PARA VARID EM RANGE FAZER block FIMPARA FIM
Rule 20    declare_var -> VAR VARID FIM
Rule 21    assign -> VAR VARID = E FIM
Rule 22    return -> RETURN E FIM
Rule 23    function -> FUNC VARID ( params ) block FIMFUNC
Rule 24    params -> params , VARID
Rule 25    params -> VARID
Rule 26    func_call -> VARID ( arguments ) FIM
Rule 27    arguments -> arguments , E
Rule 28    arguments -> E

Terminals, with rules where they appear

(                    : 16 23 26
)                    : 16 23 26
*                    : 14
+                    : 12
,                    : 24 27
-                    : 13 15
=                    : 21
EM                   : 19
ESCREVE              : 10 11
FAZER                : 19
FIM                  : 10 11 19 20 21 22 26
FIMFUNC              : 23
FIMPARA              : 19
FUNC                 : 23
NUM                  : 17
PARA                 : 19
RANGE                : 19
RETURN               : 22
STRING               : 11
VAR                  : 20 21
VARID                : 18 19 20 21 23 24 25 26
error                : 

Nonterminals, with rules where they appear

E                    : 10 12 12 13 13 14 14 15 16 21 22 27 28
arguments            : 26 27
assign               : 4
block                : 1 2 19 23
declare_var          : 5
func_call            : 9
function             : 7
init                 : 0
instruction          : 2 3
params               : 23 24
print                : 6
return               : 8

Parsing method: LALR

state 0

    (0) S' -> . init
    (1) init -> . block
    (2) block -> . block instruction
    (3) block -> . instruction
    (4) instruction -> . assign
    (5) instruction -> . declare_var
    (6) instruction -> . print
    (7) instruction -> . function
    (8) instruction -> . return
    (9) instruction -> . func_call
    (19) instruction -> . PARA VARID EM RANGE FAZER block FIMPARA FIM
    (21) assign -> . VAR VARID = E FIM
    (20) declare_var -> . VAR VARID FIM
    (10) print -> . ESCREVE E FIM
    (11) print -> . ESCREVE STRING FIM
    (23) function -> . FUNC VARID ( params ) block FIMFUNC
    (22) return -> . RETURN E FIM
    (26) func_call -> . VARID ( arguments ) FIM

    PARA            shift and go to state 10
    VAR             shift and go to state 12
    ESCREVE         shift and go to state 13
    FUNC            shift and go to state 14
    RETURN          shift and go to state 15
    VARID           shift and go to state 11

    init                           shift and go to state 1
    block                          shift and go to state 2
    instruction                    shift and go to state 3
    assign                         shift and go to state 4
    declare_var                    shift and go to state 5
    print                          shift and go to state 6
    function                       shift and go to state 7
    return                         shift and go to state 8
    func_call                      shift and go to state 9

state 1

    (0) S' -> init .



state 2

    (1) init -> block .
    (2) block -> block . instruction
    (4) instruction -> . assign
    (5) instruction -> . declare_var
    (6) instruction -> . print
    (7) instruction -> . function
    (8) instruction -> . return
    (9) instruction -> . func_call
    (19) instruction -> . PARA VARID EM RANGE FAZER block FIMPARA FIM
    (21) assign -> . VAR VARID = E FIM
    (20) declare_var -> . VAR VARID FIM
    (10) print -> . ESCREVE E FIM
    (11) print -> . ESCREVE STRING FIM
    (23) function -> . FUNC VARID ( params ) block FIMFUNC
    (22) return -> . RETURN E FIM
    (26) func_call -> . VARID ( arguments ) FIM

    $end            reduce using rule 1 (init -> block .)
    PARA            shift and go to state 10
    VAR             shift and go to state 12
    ESCREVE         shift and go to state 13
    FUNC            shift and go to state 14
    RETURN          shift and go to state 15
    VARID           shift and go to state 11

    instruction                    shift and go to state 16
    assign                         shift and go to state 4
    declare_var                    shift and go to state 5
    print                          shift and go to state 6
    function                       shift and go to state 7
    return                         shift and go to state 8
    func_call                      shift and go to state 9

state 3

    (3) block -> instruction .

    PARA            reduce using rule 3 (block -> instruction .)
    VAR             reduce using rule 3 (block -> instruction .)
    ESCREVE         reduce using rule 3 (block -> instruction .)
    FUNC            reduce using rule 3 (block -> instruction .)
    RETURN          reduce using rule 3 (block -> instruction .)
    VARID           reduce using rule 3 (block -> instruction .)
    $end            reduce using rule 3 (block -> instruction .)
    FIMPARA         reduce using rule 3 (block -> instruction .)
    FIMFUNC         reduce using rule 3 (block -> instruction .)


state 4

    (4) instruction -> assign .

    PARA            reduce using rule 4 (instruction -> assign .)
    VAR             reduce using rule 4 (instruction -> assign .)
    ESCREVE         reduce using rule 4 (instruction -> assign .)
    FUNC            reduce using rule 4 (instruction -> assign .)
    RETURN          reduce using rule 4 (instruction -> assign .)
    VARID           reduce using rule 4 (instruction -> assign .)
    $end            reduce using rule 4 (instruction -> assign .)
    FIMPARA         reduce using rule 4 (instruction -> assign .)
    FIMFUNC         reduce using rule 4 (instruction -> assign .)


state 5

    (5) instruction -> declare_var .

    PARA            reduce using rule 5 (instruction -> declare_var .)
    VAR             reduce using rule 5 (instruction -> declare_var .)
    ESCREVE         reduce using rule 5 (instruction -> declare_var .)
    FUNC            reduce using rule 5 (instruction -> declare_var .)
    RETURN          reduce using rule 5 (instruction -> declare_var .)
    VARID           reduce using rule 5 (instruction -> declare_var .)
    $end            reduce using rule 5 (instruction -> declare_var .)
    FIMPARA         reduce using rule 5 (instruction -> declare_var .)
    FIMFUNC         reduce using rule 5 (instruction -> declare_var .)


state 6

    (6) instruction -> print .

    PARA            reduce using rule 6 (instruction -> print .)
    VAR             reduce using rule 6 (instruction -> print .)
    ESCREVE         reduce using rule 6 (instruction -> print .)
    FUNC            reduce using rule 6 (instruction -> print .)
    RETURN          reduce using rule 6 (instruction -> print .)
    VARID           reduce using rule 6 (instruction -> print .)
    $end            reduce using rule 6 (instruction -> print .)
    FIMPARA         reduce using rule 6 (instruction -> print .)
    FIMFUNC         reduce using rule 6 (instruction -> print .)


state 7

    (7) instruction -> function .

    PARA            reduce using rule 7 (instruction -> function .)
    VAR             reduce using rule 7 (instruction -> function .)
    ESCREVE         reduce using rule 7 (instruction -> function .)
    FUNC            reduce using rule 7 (instruction -> function .)
    RETURN          reduce using rule 7 (instruction -> function .)
    VARID           reduce using rule 7 (instruction -> function .)
    $end            reduce using rule 7 (instruction -> function .)
    FIMPARA         reduce using rule 7 (instruction -> function .)
    FIMFUNC         reduce using rule 7 (instruction -> function .)


state 8

    (8) instruction -> return .

    PARA            reduce using rule 8 (instruction -> return .)
    VAR             reduce using rule 8 (instruction -> return .)
    ESCREVE         reduce using rule 8 (instruction -> return .)
    FUNC            reduce using rule 8 (instruction -> return .)
    RETURN          reduce using rule 8 (instruction -> return .)
    VARID           reduce using rule 8 (instruction -> return .)
    $end            reduce using rule 8 (instruction -> return .)
    FIMPARA         reduce using rule 8 (instruction -> return .)
    FIMFUNC         reduce using rule 8 (instruction -> return .)


state 9

    (9) instruction -> func_call .

    PARA            reduce using rule 9 (instruction -> func_call .)
    VAR             reduce using rule 9 (instruction -> func_call .)
    ESCREVE         reduce using rule 9 (instruction -> func_call .)
    FUNC            reduce using rule 9 (instruction -> func_call .)
    RETURN          reduce using rule 9 (instruction -> func_call .)
    VARID           reduce using rule 9 (instruction -> func_call .)
    $end            reduce using rule 9 (instruction -> func_call .)
    FIMPARA         reduce using rule 9 (instruction -> func_call .)
    FIMFUNC         reduce using rule 9 (instruction -> func_call .)


state 10

    (19) instruction -> PARA . VARID EM RANGE FAZER block FIMPARA FIM

    VARID           shift and go to state 17


state 11

    (26) func_call -> VARID . ( arguments ) FIM

    (               shift and go to state 18


state 12

    (21) assign -> VAR . VARID = E FIM
    (20) declare_var -> VAR . VARID FIM

    VARID           shift and go to state 19


state 13

    (10) print -> ESCREVE . E FIM
    (11) print -> ESCREVE . STRING FIM
    (12) E -> . E + E
    (13) E -> . E - E
    (14) E -> . E * E
    (15) E -> . - E
    (16) E -> . ( E )
    (17) E -> . NUM
    (18) E -> . VARID

    STRING          shift and go to state 21
    -               shift and go to state 22
    (               shift and go to state 23
    NUM             shift and go to state 24
    VARID           shift and go to state 25

    E                              shift and go to state 20

state 14

    (23) function -> FUNC . VARID ( params ) block FIMFUNC

    VARID           shift and go to state 26


state 15

    (22) return -> RETURN . E FIM
    (12) E -> . E + E
    (13) E -> . E - E
    (14) E -> . E * E
    (15) E -> . - E
    (16) E -> . ( E )
    (17) E -> . NUM
    (18) E -> . VARID

    -               shift and go to state 22
    (               shift and go to state 23
    NUM             shift and go to state 24
    VARID           shift and go to state 25

    E                              shift and go to state 27

state 16

    (2) block -> block instruction .

    PARA            reduce using rule 2 (block -> block instruction .)
    VAR             reduce using rule 2 (block -> block instruction .)
    ESCREVE         reduce using rule 2 (block -> block instruction .)
    FUNC            reduce using rule 2 (block -> block instruction .)
    RETURN          reduce using rule 2 (block -> block instruction .)
    VARID           reduce using rule 2 (block -> block instruction .)
    $end            reduce using rule 2 (block -> block instruction .)
    FIMPARA         reduce using rule 2 (block -> block instruction .)
    FIMFUNC         reduce using rule 2 (block -> block instruction .)


state 17

    (19) instruction -> PARA VARID . EM RANGE FAZER block FIMPARA FIM

    EM              shift and go to state 28


state 18

    (26) func_call -> VARID ( . arguments ) FIM
    (27) arguments -> . arguments , E
    (28) arguments -> . E
    (12) E -> . E + E
    (13) E -> . E - E
    (14) E -> . E * E
    (15) E -> . - E
    (16) E -> . ( E )
    (17) E -> . NUM
    (18) E -> . VARID

    -               shift and go to state 22
    (               shift and go to state 23
    NUM             shift and go to state 24
    VARID           shift and go to state 25

    arguments                      shift and go to state 29
    E                              shift and go to state 30

state 19

    (21) assign -> VAR VARID . = E FIM
    (20) declare_var -> VAR VARID . FIM

    =               shift and go to state 31
    FIM             shift and go to state 32


state 20

    (10) print -> ESCREVE E . FIM
    (12) E -> E . + E
    (13) E -> E . - E
    (14) E -> E . * E

    FIM             shift and go to state 33
    +               shift and go to state 34
    -               shift and go to state 35
    *               shift and go to state 36


state 21

    (11) print -> ESCREVE STRING . FIM

    FIM             shift and go to state 37


state 22

    (15) E -> - . E
    (12) E -> . E + E
    (13) E -> . E - E
    (14) E -> . E * E
    (15) E -> . - E
    (16) E -> . ( E )
    (17) E -> . NUM
    (18) E -> . VARID

    -               shift and go to state 22
    (               shift and go to state 23
    NUM             shift and go to state 24
    VARID           shift and go to state 25

    E                              shift and go to state 38

state 23

    (16) E -> ( . E )
    (12) E -> . E + E
    (13) E -> . E - E
    (14) E -> . E * E
    (15) E -> . - E
    (16) E -> . ( E )
    (17) E -> . NUM
    (18) E -> . VARID

    -               shift and go to state 22
    (               shift and go to state 23
    NUM             shift and go to state 24
    VARID           shift and go to state 25

    E                              shift and go to state 39

state 24

    (17) E -> NUM .

    FIM             reduce using rule 17 (E -> NUM .)
    +               reduce using rule 17 (E -> NUM .)
    -               reduce using rule 17 (E -> NUM .)
    *               reduce using rule 17 (E -> NUM .)
    )               reduce using rule 17 (E -> NUM .)
    ,               reduce using rule 17 (E -> NUM .)


state 25

    (18) E -> VARID .

    FIM             reduce using rule 18 (E -> VARID .)
    +               reduce using rule 18 (E -> VARID .)
    -               reduce using rule 18 (E -> VARID .)
    *               reduce using rule 18 (E -> VARID .)
    )               reduce using rule 18 (E -> VARID .)
    ,               reduce using rule 18 (E -> VARID .)


state 26

    (23) function -> FUNC VARID . ( params ) block FIMFUNC

    (               shift and go to state 40


state 27

    (22) return -> RETURN E . FIM
    (12) E -> E . + E
    (13) E -> E . - E
    (14) E -> E . * E

    FIM             shift and go to state 41
    +               shift and go to state 34
    -               shift and go to state 35
    *               shift and go to state 36


state 28

    (19) instruction -> PARA VARID EM . RANGE FAZER block FIMPARA FIM

    RANGE           shift and go to state 42


state 29

    (26) func_call -> VARID ( arguments . ) FIM
    (27) arguments -> arguments . , E

    )               shift and go to state 43
    ,               shift and go to state 44


state 30

    (28) arguments -> E .
    (12) E -> E . + E
    (13) E -> E . - E
    (14) E -> E . * E

    )               reduce using rule 28 (arguments -> E .)
    ,               reduce using rule 28 (arguments -> E .)
    +               shift and go to state 34
    -               shift and go to state 35
    *               shift and go to state 36


state 31

    (21) assign -> VAR VARID = . E FIM
    (12) E -> . E + E
    (13) E -> . E - E
    (14) E -> . E * E
    (15) E -> . - E
    (16) E -> . ( E )
    (17) E -> . NUM
    (18) E -> . VARID

    -               shift and go to state 22
    (               shift and go to state 23
    NUM             shift and go to state 24
    VARID           shift and go to state 25

    E                              shift and go to state 45

state 32

    (20) declare_var -> VAR VARID FIM .

    PARA            reduce using rule 20 (declare_var -> VAR VARID FIM .)
    VAR             reduce using rule 20 (declare_var -> VAR VARID FIM .)
    ESCREVE         reduce using rule 20 (declare_var -> VAR VARID FIM .)
    FUNC            reduce using rule 20 (declare_var -> VAR VARID FIM .)
    RETURN          reduce using rule 20 (declare_var -> VAR VARID FIM .)
    VARID           reduce using rule 20 (declare_var -> VAR VARID FIM .)
    $end            reduce using rule 20 (declare_var -> VAR VARID FIM .)
    FIMPARA         reduce using rule 20 (declare_var -> VAR VARID FIM .)
    FIMFUNC         reduce using rule 20 (declare_var -> VAR VARID FIM .)


state 33

    (10) print -> ESCREVE E FIM .

    PARA            reduce using rule 10 (print -> ESCREVE E FIM .)
    VAR             reduce using rule 10 (print -> ESCREVE E FIM .)
    ESCREVE         reduce using rule 10 (print -> ESCREVE E FIM .)
    FUNC            reduce using rule 10 (print -> ESCREVE E FIM .)
    RETURN          reduce using rule 10 (print -> ESCREVE E FIM .)
    VARID           reduce using rule 10 (print -> ESCREVE E FIM .)
    $end            reduce using rule 10 (print -> ESCREVE E FIM .)
    FIMPARA         reduce using rule 10 (print -> ESCREVE E FIM .)
    FIMFUNC         reduce using rule 10 (print -> ESCREVE E FIM .)


state 34

    (12) E -> E + . E
    (12) E -> . E + E
    (13) E -> . E - E
    (14) E -> . E * E
    (15) E -> . - E
    (16) E -> . ( E )
    (17) E -> . NUM
    (18) E -> . VARID

    -               shift and go to state 22
    (               shift and go to state 23
    NUM             shift and go to state 24
    VARID           shift and go to state 25

    E                              shift and go to state 46

state 35

    (13) E -> E - . E
    (12) E -> . E + E
    (13) E -> . E - E
    (14) E -> . E * E
    (15) E -> . - E
    (16) E -> . ( E )
    (17) E -> . NUM
    (18) E -> . VARID

    -               shift and go to state 22
    (               shift and go to state 23
    NUM             shift and go to state 24
    VARID           shift and go to state 25

    E                              shift and go to state 47

state 36

    (14) E -> E * . E
    (12) E -> . E + E
    (13) E -> . E - E
    (14) E -> . E * E
    (15) E -> . - E
    (16) E -> . ( E )
    (17) E -> . NUM
    (18) E -> . VARID

    -               shift and go to state 22
    (               shift and go to state 23
    NUM             shift and go to state 24
    VARID           shift and go to state 25

    E                              shift and go to state 48

state 37

    (11) print -> ESCREVE STRING FIM .

    PARA            reduce using rule 11 (print -> ESCREVE STRING FIM .)
    VAR             reduce using rule 11 (print -> ESCREVE STRING FIM .)
    ESCREVE         reduce using rule 11 (print -> ESCREVE STRING FIM .)
    FUNC            reduce using rule 11 (print -> ESCREVE STRING FIM .)
    RETURN          reduce using rule 11 (print -> ESCREVE STRING FIM .)
    VARID           reduce using rule 11 (print -> ESCREVE STRING FIM .)
    $end            reduce using rule 11 (print -> ESCREVE STRING FIM .)
    FIMPARA         reduce using rule 11 (print -> ESCREVE STRING FIM .)
    FIMFUNC         reduce using rule 11 (print -> ESCREVE STRING FIM .)


state 38

    (15) E -> - E .
    (12) E -> E . + E
    (13) E -> E . - E
    (14) E -> E . * E

    FIM             reduce using rule 15 (E -> - E .)
    +               reduce using rule 15 (E -> - E .)
    -               reduce using rule 15 (E -> - E .)
    *               reduce using rule 15 (E -> - E .)
    )               reduce using rule 15 (E -> - E .)
    ,               reduce using rule 15 (E -> - E .)

  ! +               [ shift and go to state 34 ]
  ! -               [ shift and go to state 35 ]
  ! *               [ shift and go to state 36 ]


state 39

    (16) E -> ( E . )
    (12) E -> E . + E
    (13) E -> E . - E
    (14) E -> E . * E

    )               shift and go to state 49
    +               shift and go to state 34
    -               shift and go to state 35
    *               shift and go to state 36


state 40

    (23) function -> FUNC VARID ( . params ) block FIMFUNC
    (24) params -> . params , VARID
    (25) params -> . VARID

    VARID           shift and go to state 50

    params                         shift and go to state 51

state 41

    (22) return -> RETURN E FIM .

    PARA            reduce using rule 22 (return -> RETURN E FIM .)
    VAR             reduce using rule 22 (return -> RETURN E FIM .)
    ESCREVE         reduce using rule 22 (return -> RETURN E FIM .)
    FUNC            reduce using rule 22 (return -> RETURN E FIM .)
    RETURN          reduce using rule 22 (return -> RETURN E FIM .)
    VARID           reduce using rule 22 (return -> RETURN E FIM .)
    $end            reduce using rule 22 (return -> RETURN E FIM .)
    FIMPARA         reduce using rule 22 (return -> RETURN E FIM .)
    FIMFUNC         reduce using rule 22 (return -> RETURN E FIM .)


state 42

    (19) instruction -> PARA VARID EM RANGE . FAZER block FIMPARA FIM

    FAZER           shift and go to state 52


state 43

    (26) func_call -> VARID ( arguments ) . FIM

    FIM             shift and go to state 53


state 44

    (27) arguments -> arguments , . E
    (12) E -> . E + E
    (13) E -> . E - E
    (14) E -> . E * E
    (15) E -> . - E
    (16) E -> . ( E )
    (17) E -> . NUM
    (18) E -> . VARID

    -               shift and go to state 22
    (               shift and go to state 23
    NUM             shift and go to state 24
    VARID           shift and go to state 25

    E                              shift and go to state 54

state 45

    (21) assign -> VAR VARID = E . FIM
    (12) E -> E . + E
    (13) E -> E . - E
    (14) E -> E . * E

    FIM             shift and go to state 55
    +               shift and go to state 34
    -               shift and go to state 35
    *               shift and go to state 36


state 46

    (12) E -> E + E .
    (12) E -> E . + E
    (13) E -> E . - E
    (14) E -> E . * E

    FIM             reduce using rule 12 (E -> E + E .)
    +               reduce using rule 12 (E -> E + E .)
    -               reduce using rule 12 (E -> E + E .)
    )               reduce using rule 12 (E -> E + E .)
    ,               reduce using rule 12 (E -> E + E .)
    *               shift and go to state 36

  ! *               [ reduce using rule 12 (E -> E + E .) ]
  ! +               [ shift and go to state 34 ]
  ! -               [ shift and go to state 35 ]


state 47

    (13) E -> E - E .
    (12) E -> E . + E
    (13) E -> E . - E
    (14) E -> E . * E

    FIM             reduce using rule 13 (E -> E - E .)
    +               reduce using rule 13 (E -> E - E .)
    -               reduce using rule 13 (E -> E - E .)
    )               reduce using rule 13 (E -> E - E .)
    ,               reduce using rule 13 (E -> E - E .)
    *               shift and go to state 36

  ! *               [ reduce using rule 13 (E -> E - E .) ]
  ! +               [ shift and go to state 34 ]
  ! -               [ shift and go to state 35 ]


state 48

    (14) E -> E * E .
    (12) E -> E . + E
    (13) E -> E . - E
    (14) E -> E . * E

    FIM             reduce using rule 14 (E -> E * E .)
    +               reduce using rule 14 (E -> E * E .)
    -               reduce using rule 14 (E -> E * E .)
    *               reduce using rule 14 (E -> E * E .)
    )               reduce using rule 14 (E -> E * E .)
    ,               reduce using rule 14 (E -> E * E .)

  ! +               [ shift and go to state 34 ]
  ! -               [ shift and go to state 35 ]
  ! *               [ shift and go to state 36 ]


state 49

    (16) E -> ( E ) .

    FIM             reduce using rule 16 (E -> ( E ) .)
    +               reduce using rule 16 (E -> ( E ) .)
    -               reduce using rule 16 (E -> ( E ) .)
    *               reduce using rule 16 (E -> ( E ) .)
    )               reduce using rule 16 (E -> ( E ) .)
    ,               reduce using rule 16 (E -> ( E ) .)


state 50

    (25) params -> VARID .

    )               reduce using rule 25 (params -> VARID .)
    ,               reduce using rule 25 (params -> VARID .)


state 51

    (23) function -> FUNC VARID ( params . ) block FIMFUNC
    (24) params -> params . , VARID

    )               shift and go to state 56
    ,               shift and go to state 57


state 52

    (19) instruction -> PARA VARID EM RANGE FAZER . block FIMPARA FIM
    (2) block -> . block instruction
    (3) block -> . instruction
    (4) instruction -> . assign
    (5) instruction -> . declare_var
    (6) instruction -> . print
    (7) instruction -> . function
    (8) instruction -> . return
    (9) instruction -> . func_call
    (19) instruction -> . PARA VARID EM RANGE FAZER block FIMPARA FIM
    (21) assign -> . VAR VARID = E FIM
    (20) declare_var -> . VAR VARID FIM
    (10) print -> . ESCREVE E FIM
    (11) print -> . ESCREVE STRING FIM
    (23) function -> . FUNC VARID ( params ) block FIMFUNC
    (22) return -> . RETURN E FIM
    (26) func_call -> . VARID ( arguments ) FIM

    PARA            shift and go to state 10
    VAR             shift and go to state 12
    ESCREVE         shift and go to state 13
    FUNC            shift and go to state 14
    RETURN          shift and go to state 15
    VARID           shift and go to state 11

    block                          shift and go to state 58
    instruction                    shift and go to state 3
    assign                         shift and go to state 4
    declare_var                    shift and go to state 5
    print                          shift and go to state 6
    function                       shift and go to state 7
    return                         shift and go to state 8
    func_call                      shift and go to state 9

state 53

    (26) func_call -> VARID ( arguments ) FIM .

    PARA            reduce using rule 26 (func_call -> VARID ( arguments ) FIM .)
    VAR             reduce using rule 26 (func_call -> VARID ( arguments ) FIM .)
    ESCREVE         reduce using rule 26 (func_call -> VARID ( arguments ) FIM .)
    FUNC            reduce using rule 26 (func_call -> VARID ( arguments ) FIM .)
    RETURN          reduce using rule 26 (func_call -> VARID ( arguments ) FIM .)
    VARID           reduce using rule 26 (func_call -> VARID ( arguments ) FIM .)
    $end            reduce using rule 26 (func_call -> VARID ( arguments ) FIM .)
    FIMPARA         reduce using rule 26 (func_call -> VARID ( arguments ) FIM .)
    FIMFUNC         reduce using rule 26 (func_call -> VARID ( arguments ) FIM .)


state 54

    (27) arguments -> arguments , E .
    (12) E -> E . + E
    (13) E -> E . - E
    (14) E -> E . * E

    )               reduce using rule 27 (arguments -> arguments , E .)
    ,               reduce using rule 27 (arguments -> arguments , E .)
    +               shift and go to state 34
    -               shift and go to state 35
    *               shift and go to state 36


state 55

    (21) assign -> VAR VARID = E FIM .

    PARA            reduce using rule 21 (assign -> VAR VARID = E FIM .)
    VAR             reduce using rule 21 (assign -> VAR VARID = E FIM .)
    ESCREVE         reduce using rule 21 (assign -> VAR VARID = E FIM .)
    FUNC            reduce using rule 21 (assign -> VAR VARID = E FIM .)
    RETURN          reduce using rule 21 (assign -> VAR VARID = E FIM .)
    VARID           reduce using rule 21 (assign -> VAR VARID = E FIM .)
    $end            reduce using rule 21 (assign -> VAR VARID = E FIM .)
    FIMPARA         reduce using rule 21 (assign -> VAR VARID = E FIM .)
    FIMFUNC         reduce using rule 21 (assign -> VAR VARID = E FIM .)


state 56

    (23) function -> FUNC VARID ( params ) . block FIMFUNC
    (2) block -> . block instruction
    (3) block -> . instruction
    (4) instruction -> . assign
    (5) instruction -> . declare_var
    (6) instruction -> . print
    (7) instruction -> . function
    (8) instruction -> . return
    (9) instruction -> . func_call
    (19) instruction -> . PARA VARID EM RANGE FAZER block FIMPARA FIM
    (21) assign -> . VAR VARID = E FIM
    (20) declare_var -> . VAR VARID FIM
    (10) print -> . ESCREVE E FIM
    (11) print -> . ESCREVE STRING FIM
    (23) function -> . FUNC VARID ( params ) block FIMFUNC
    (22) return -> . RETURN E FIM
    (26) func_call -> . VARID ( arguments ) FIM

    PARA            shift and go to state 10
    VAR             shift and go to state 12
    ESCREVE         shift and go to state 13
    FUNC            shift and go to state 14
    RETURN          shift and go to state 15
    VARID           shift and go to state 11

    block                          shift and go to state 59
    instruction                    shift and go to state 3
    assign                         shift and go to state 4
    declare_var                    shift and go to state 5
    print                          shift and go to state 6
    function                       shift and go to state 7
    return                         shift and go to state 8
    func_call                      shift and go to state 9

state 57

    (24) params -> params , . VARID

    VARID           shift and go to state 60


state 58

    (19) instruction -> PARA VARID EM RANGE FAZER block . FIMPARA FIM
    (2) block -> block . instruction
    (4) instruction -> . assign
    (5) instruction -> . declare_var
    (6) instruction -> . print
    (7) instruction -> . function
    (8) instruction -> . return
    (9) instruction -> . func_call
    (19) instruction -> . PARA VARID EM RANGE FAZER block FIMPARA FIM
    (21) assign -> . VAR VARID = E FIM
    (20) declare_var -> . VAR VARID FIM
    (10) print -> . ESCREVE E FIM
    (11) print -> . ESCREVE STRING FIM
    (23) function -> . FUNC VARID ( params ) block FIMFUNC
    (22) return -> . RETURN E FIM
    (26) func_call -> . VARID ( arguments ) FIM

    FIMPARA         shift and go to state 61
    PARA            shift and go to state 10
    VAR             shift and go to state 12
    ESCREVE         shift and go to state 13
    FUNC            shift and go to state 14
    RETURN          shift and go to state 15
    VARID           shift and go to state 11

    instruction                    shift and go to state 16
    assign                         shift and go to state 4
    declare_var                    shift and go to state 5
    print                          shift and go to state 6
    function                       shift and go to state 7
    return                         shift and go to state 8
    func_call                      shift and go to state 9

state 59

    (23) function -> FUNC VARID ( params ) block . FIMFUNC
    (2) block -> block . instruction
    (4) instruction -> . assign
    (5) instruction -> . declare_var
    (6) instruction -> . print
    (7) instruction -> . function
    (8) instruction -> . return
    (9) instruction -> . func_call
    (19) instruction -> . PARA VARID EM RANGE FAZER block FIMPARA FIM
    (21) assign -> . VAR VARID = E FIM
    (20) declare_var -> . VAR VARID FIM
    (10) print -> . ESCREVE E FIM
    (11) print -> . ESCREVE STRING FIM
    (23) function -> . FUNC VARID ( params ) block FIMFUNC
    (22) return -> . RETURN E FIM
    (26) func_call -> . VARID ( arguments ) FIM

    FIMFUNC         shift and go to state 62
    PARA            shift and go to state 10
    VAR             shift and go to state 12
    ESCREVE         shift and go to state 13
    FUNC            shift and go to state 14
    RETURN          shift and go to state 15
    VARID           shift and go to state 11

    instruction                    shift and go to state 16
    assign                         shift and go to state 4
    declare_var                    shift and go to state 5
    print                          shift and go to state 6
    function                       shift and go to state 7
    return                         shift and go to state 8
    func_call                      shift and go to state 9

state 60

    (24) params -> params , VARID .

    )               reduce using rule 24 (params -> params , VARID .)
    ,               reduce using rule 24 (params -> params , VARID .)


state 61

    (19) instruction -> PARA VARID EM RANGE FAZER block FIMPARA . FIM

    FIM             shift and go to state 63


state 62

    (23) function -> FUNC VARID ( params ) block FIMFUNC .

    PARA            reduce using rule 23 (function -> FUNC VARID ( params ) block FIMFUNC .)
    VAR             reduce using rule 23 (function -> FUNC VARID ( params ) block FIMFUNC .)
    ESCREVE         reduce using rule 23 (function -> FUNC VARID ( params ) block FIMFUNC .)
    FUNC            reduce using rule 23 (function -> FUNC VARID ( params ) block FIMFUNC .)
    RETURN          reduce using rule 23 (function -> FUNC VARID ( params ) block FIMFUNC .)
    VARID           reduce using rule 23 (function -> FUNC VARID ( params ) block FIMFUNC .)
    $end            reduce using rule 23 (function -> FUNC VARID ( params ) block FIMFUNC .)
    FIMPARA         reduce using rule 23 (function -> FUNC VARID ( params ) block FIMFUNC .)
    FIMFUNC         reduce using rule 23 (function -> FUNC VARID ( params ) block FIMFUNC .)


state 63

    (19) instruction -> PARA VARID EM RANGE FAZER block FIMPARA FIM .

    PARA            reduce using rule 19 (instruction -> PARA VARID EM RANGE FAZER block FIMPARA FIM .)
    VAR             reduce using rule 19 (instruction -> PARA VARID EM RANGE FAZER block FIMPARA FIM .)
    ESCREVE         reduce using rule 19 (instruction -> PARA VARID EM RANGE FAZER block FIMPARA FIM .)
    FUNC            reduce using rule 19 (instruction -> PARA VARID EM RANGE FAZER block FIMPARA FIM .)
    RETURN          reduce using rule 19 (instruction -> PARA VARID EM RANGE FAZER block FIMPARA FIM .)
    VARID           reduce using rule 19 (instruction -> PARA VARID EM RANGE FAZER block FIMPARA FIM .)
    $end            reduce using rule 19 (instruction -> PARA VARID EM RANGE FAZER block FIMPARA FIM .)
    FIMPARA         reduce using rule 19 (instruction -> PARA VARID EM RANGE FAZER block FIMPARA FIM .)
    FIMFUNC         reduce using rule 19 (instruction -> PARA VARID EM RANGE FAZER block FIMPARA FIM .)

