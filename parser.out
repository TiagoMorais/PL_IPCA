Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    SEPARADOR

Grammar

Rule 0     S' -> init
Rule 1     init -> block
Rule 2     block -> block instruction
Rule 3     block -> instruction
Rule 4     instruction -> assign
Rule 5     instruction -> declare_var
Rule 6     instruction -> print
Rule 7     print -> ESCREVE E FIM
Rule 8     print -> ESCREVE STRING FIM
Rule 9     E -> E + E
Rule 10    E -> E - E
Rule 11    E -> E * E
Rule 12    E -> - E
Rule 13    E -> ( E )
Rule 14    E -> NUM
Rule 15    E -> VARID
Rule 16    instruction -> PARA VARID EM RANGE FAZER block FIMPARA FIM
Rule 17    declare_var -> VAR VARID FIM
Rule 18    assign -> VAR VARID = E FIM

Terminals, with rules where they appear

(                    : 13
)                    : 13
*                    : 11
+                    : 9
-                    : 10 12
=                    : 18
EM                   : 16
ESCREVE              : 7 8
FAZER                : 16
FIM                  : 7 8 16 17 18
FIMPARA              : 16
NUM                  : 14
PARA                 : 16
RANGE                : 16
SEPARADOR            : 
STRING               : 8
VAR                  : 17 18
VARID                : 15 16 17 18
error                : 

Nonterminals, with rules where they appear

E                    : 7 9 9 10 10 11 11 12 13 18
assign               : 4
block                : 1 2 16
declare_var          : 5
init                 : 0
instruction          : 2 3
print                : 6

Parsing method: LALR

state 0

    (0) S' -> . init
    (1) init -> . block
    (2) block -> . block instruction
    (3) block -> . instruction
    (4) instruction -> . assign
    (5) instruction -> . declare_var
    (6) instruction -> . print
    (16) instruction -> . PARA VARID EM RANGE FAZER block FIMPARA FIM
    (18) assign -> . VAR VARID = E FIM
    (17) declare_var -> . VAR VARID FIM
    (7) print -> . ESCREVE E FIM
    (8) print -> . ESCREVE STRING FIM

    PARA            shift and go to state 7
    VAR             shift and go to state 8
    ESCREVE         shift and go to state 9

    init                           shift and go to state 1
    block                          shift and go to state 2
    instruction                    shift and go to state 3
    assign                         shift and go to state 4
    declare_var                    shift and go to state 5
    print                          shift and go to state 6

state 1

    (0) S' -> init .



state 2

    (1) init -> block .
    (2) block -> block . instruction
    (4) instruction -> . assign
    (5) instruction -> . declare_var
    (6) instruction -> . print
    (16) instruction -> . PARA VARID EM RANGE FAZER block FIMPARA FIM
    (18) assign -> . VAR VARID = E FIM
    (17) declare_var -> . VAR VARID FIM
    (7) print -> . ESCREVE E FIM
    (8) print -> . ESCREVE STRING FIM

    $end            reduce using rule 1 (init -> block .)
    PARA            shift and go to state 7
    VAR             shift and go to state 8
    ESCREVE         shift and go to state 9

    instruction                    shift and go to state 10
    assign                         shift and go to state 4
    declare_var                    shift and go to state 5
    print                          shift and go to state 6

state 3

    (3) block -> instruction .

    PARA            reduce using rule 3 (block -> instruction .)
    VAR             reduce using rule 3 (block -> instruction .)
    ESCREVE         reduce using rule 3 (block -> instruction .)
    $end            reduce using rule 3 (block -> instruction .)
    FIMPARA         reduce using rule 3 (block -> instruction .)


state 4

    (4) instruction -> assign .

    PARA            reduce using rule 4 (instruction -> assign .)
    VAR             reduce using rule 4 (instruction -> assign .)
    ESCREVE         reduce using rule 4 (instruction -> assign .)
    $end            reduce using rule 4 (instruction -> assign .)
    FIMPARA         reduce using rule 4 (instruction -> assign .)


state 5

    (5) instruction -> declare_var .

    PARA            reduce using rule 5 (instruction -> declare_var .)
    VAR             reduce using rule 5 (instruction -> declare_var .)
    ESCREVE         reduce using rule 5 (instruction -> declare_var .)
    $end            reduce using rule 5 (instruction -> declare_var .)
    FIMPARA         reduce using rule 5 (instruction -> declare_var .)


state 6

    (6) instruction -> print .

    PARA            reduce using rule 6 (instruction -> print .)
    VAR             reduce using rule 6 (instruction -> print .)
    ESCREVE         reduce using rule 6 (instruction -> print .)
    $end            reduce using rule 6 (instruction -> print .)
    FIMPARA         reduce using rule 6 (instruction -> print .)


state 7

    (16) instruction -> PARA . VARID EM RANGE FAZER block FIMPARA FIM

    VARID           shift and go to state 11


state 8

    (18) assign -> VAR . VARID = E FIM
    (17) declare_var -> VAR . VARID FIM

    VARID           shift and go to state 12


state 9

    (7) print -> ESCREVE . E FIM
    (8) print -> ESCREVE . STRING FIM
    (9) E -> . E + E
    (10) E -> . E - E
    (11) E -> . E * E
    (12) E -> . - E
    (13) E -> . ( E )
    (14) E -> . NUM
    (15) E -> . VARID

    STRING          shift and go to state 14
    -               shift and go to state 15
    (               shift and go to state 16
    NUM             shift and go to state 17
    VARID           shift and go to state 18

    E                              shift and go to state 13

state 10

    (2) block -> block instruction .

    PARA            reduce using rule 2 (block -> block instruction .)
    VAR             reduce using rule 2 (block -> block instruction .)
    ESCREVE         reduce using rule 2 (block -> block instruction .)
    $end            reduce using rule 2 (block -> block instruction .)
    FIMPARA         reduce using rule 2 (block -> block instruction .)


state 11

    (16) instruction -> PARA VARID . EM RANGE FAZER block FIMPARA FIM

    EM              shift and go to state 19


state 12

    (18) assign -> VAR VARID . = E FIM
    (17) declare_var -> VAR VARID . FIM

    =               shift and go to state 20
    FIM             shift and go to state 21


state 13

    (7) print -> ESCREVE E . FIM
    (9) E -> E . + E
    (10) E -> E . - E
    (11) E -> E . * E

    FIM             shift and go to state 22
    +               shift and go to state 23
    -               shift and go to state 24
    *               shift and go to state 25


state 14

    (8) print -> ESCREVE STRING . FIM

    FIM             shift and go to state 26


state 15

    (12) E -> - . E
    (9) E -> . E + E
    (10) E -> . E - E
    (11) E -> . E * E
    (12) E -> . - E
    (13) E -> . ( E )
    (14) E -> . NUM
    (15) E -> . VARID

    -               shift and go to state 15
    (               shift and go to state 16
    NUM             shift and go to state 17
    VARID           shift and go to state 18

    E                              shift and go to state 27

state 16

    (13) E -> ( . E )
    (9) E -> . E + E
    (10) E -> . E - E
    (11) E -> . E * E
    (12) E -> . - E
    (13) E -> . ( E )
    (14) E -> . NUM
    (15) E -> . VARID

    -               shift and go to state 15
    (               shift and go to state 16
    NUM             shift and go to state 17
    VARID           shift and go to state 18

    E                              shift and go to state 28

state 17

    (14) E -> NUM .

    FIM             reduce using rule 14 (E -> NUM .)
    +               reduce using rule 14 (E -> NUM .)
    -               reduce using rule 14 (E -> NUM .)
    *               reduce using rule 14 (E -> NUM .)
    )               reduce using rule 14 (E -> NUM .)


state 18

    (15) E -> VARID .

    FIM             reduce using rule 15 (E -> VARID .)
    +               reduce using rule 15 (E -> VARID .)
    -               reduce using rule 15 (E -> VARID .)
    *               reduce using rule 15 (E -> VARID .)
    )               reduce using rule 15 (E -> VARID .)


state 19

    (16) instruction -> PARA VARID EM . RANGE FAZER block FIMPARA FIM

    RANGE           shift and go to state 29


state 20

    (18) assign -> VAR VARID = . E FIM
    (9) E -> . E + E
    (10) E -> . E - E
    (11) E -> . E * E
    (12) E -> . - E
    (13) E -> . ( E )
    (14) E -> . NUM
    (15) E -> . VARID

    -               shift and go to state 15
    (               shift and go to state 16
    NUM             shift and go to state 17
    VARID           shift and go to state 18

    E                              shift and go to state 30

state 21

    (17) declare_var -> VAR VARID FIM .

    PARA            reduce using rule 17 (declare_var -> VAR VARID FIM .)
    VAR             reduce using rule 17 (declare_var -> VAR VARID FIM .)
    ESCREVE         reduce using rule 17 (declare_var -> VAR VARID FIM .)
    $end            reduce using rule 17 (declare_var -> VAR VARID FIM .)
    FIMPARA         reduce using rule 17 (declare_var -> VAR VARID FIM .)


state 22

    (7) print -> ESCREVE E FIM .

    PARA            reduce using rule 7 (print -> ESCREVE E FIM .)
    VAR             reduce using rule 7 (print -> ESCREVE E FIM .)
    ESCREVE         reduce using rule 7 (print -> ESCREVE E FIM .)
    $end            reduce using rule 7 (print -> ESCREVE E FIM .)
    FIMPARA         reduce using rule 7 (print -> ESCREVE E FIM .)


state 23

    (9) E -> E + . E
    (9) E -> . E + E
    (10) E -> . E - E
    (11) E -> . E * E
    (12) E -> . - E
    (13) E -> . ( E )
    (14) E -> . NUM
    (15) E -> . VARID

    -               shift and go to state 15
    (               shift and go to state 16
    NUM             shift and go to state 17
    VARID           shift and go to state 18

    E                              shift and go to state 31

state 24

    (10) E -> E - . E
    (9) E -> . E + E
    (10) E -> . E - E
    (11) E -> . E * E
    (12) E -> . - E
    (13) E -> . ( E )
    (14) E -> . NUM
    (15) E -> . VARID

    -               shift and go to state 15
    (               shift and go to state 16
    NUM             shift and go to state 17
    VARID           shift and go to state 18

    E                              shift and go to state 32

state 25

    (11) E -> E * . E
    (9) E -> . E + E
    (10) E -> . E - E
    (11) E -> . E * E
    (12) E -> . - E
    (13) E -> . ( E )
    (14) E -> . NUM
    (15) E -> . VARID

    -               shift and go to state 15
    (               shift and go to state 16
    NUM             shift and go to state 17
    VARID           shift and go to state 18

    E                              shift and go to state 33

state 26

    (8) print -> ESCREVE STRING FIM .

    PARA            reduce using rule 8 (print -> ESCREVE STRING FIM .)
    VAR             reduce using rule 8 (print -> ESCREVE STRING FIM .)
    ESCREVE         reduce using rule 8 (print -> ESCREVE STRING FIM .)
    $end            reduce using rule 8 (print -> ESCREVE STRING FIM .)
    FIMPARA         reduce using rule 8 (print -> ESCREVE STRING FIM .)


state 27

    (12) E -> - E .
    (9) E -> E . + E
    (10) E -> E . - E
    (11) E -> E . * E

    FIM             reduce using rule 12 (E -> - E .)
    +               reduce using rule 12 (E -> - E .)
    -               reduce using rule 12 (E -> - E .)
    *               reduce using rule 12 (E -> - E .)
    )               reduce using rule 12 (E -> - E .)

  ! +               [ shift and go to state 23 ]
  ! -               [ shift and go to state 24 ]
  ! *               [ shift and go to state 25 ]


state 28

    (13) E -> ( E . )
    (9) E -> E . + E
    (10) E -> E . - E
    (11) E -> E . * E

    )               shift and go to state 34
    +               shift and go to state 23
    -               shift and go to state 24
    *               shift and go to state 25


state 29

    (16) instruction -> PARA VARID EM RANGE . FAZER block FIMPARA FIM

    FAZER           shift and go to state 35


state 30

    (18) assign -> VAR VARID = E . FIM
    (9) E -> E . + E
    (10) E -> E . - E
    (11) E -> E . * E

    FIM             shift and go to state 36
    +               shift and go to state 23
    -               shift and go to state 24
    *               shift and go to state 25


state 31

    (9) E -> E + E .
    (9) E -> E . + E
    (10) E -> E . - E
    (11) E -> E . * E

    FIM             reduce using rule 9 (E -> E + E .)
    +               reduce using rule 9 (E -> E + E .)
    -               reduce using rule 9 (E -> E + E .)
    )               reduce using rule 9 (E -> E + E .)
    *               shift and go to state 25

  ! *               [ reduce using rule 9 (E -> E + E .) ]
  ! +               [ shift and go to state 23 ]
  ! -               [ shift and go to state 24 ]


state 32

    (10) E -> E - E .
    (9) E -> E . + E
    (10) E -> E . - E
    (11) E -> E . * E

    FIM             reduce using rule 10 (E -> E - E .)
    +               reduce using rule 10 (E -> E - E .)
    -               reduce using rule 10 (E -> E - E .)
    )               reduce using rule 10 (E -> E - E .)
    *               shift and go to state 25

  ! *               [ reduce using rule 10 (E -> E - E .) ]
  ! +               [ shift and go to state 23 ]
  ! -               [ shift and go to state 24 ]


state 33

    (11) E -> E * E .
    (9) E -> E . + E
    (10) E -> E . - E
    (11) E -> E . * E

    FIM             reduce using rule 11 (E -> E * E .)
    +               reduce using rule 11 (E -> E * E .)
    -               reduce using rule 11 (E -> E * E .)
    *               reduce using rule 11 (E -> E * E .)
    )               reduce using rule 11 (E -> E * E .)

  ! +               [ shift and go to state 23 ]
  ! -               [ shift and go to state 24 ]
  ! *               [ shift and go to state 25 ]


state 34

    (13) E -> ( E ) .

    FIM             reduce using rule 13 (E -> ( E ) .)
    +               reduce using rule 13 (E -> ( E ) .)
    -               reduce using rule 13 (E -> ( E ) .)
    *               reduce using rule 13 (E -> ( E ) .)
    )               reduce using rule 13 (E -> ( E ) .)


state 35

    (16) instruction -> PARA VARID EM RANGE FAZER . block FIMPARA FIM
    (2) block -> . block instruction
    (3) block -> . instruction
    (4) instruction -> . assign
    (5) instruction -> . declare_var
    (6) instruction -> . print
    (16) instruction -> . PARA VARID EM RANGE FAZER block FIMPARA FIM
    (18) assign -> . VAR VARID = E FIM
    (17) declare_var -> . VAR VARID FIM
    (7) print -> . ESCREVE E FIM
    (8) print -> . ESCREVE STRING FIM

    PARA            shift and go to state 7
    VAR             shift and go to state 8
    ESCREVE         shift and go to state 9

    block                          shift and go to state 37
    instruction                    shift and go to state 3
    assign                         shift and go to state 4
    declare_var                    shift and go to state 5
    print                          shift and go to state 6

state 36

    (18) assign -> VAR VARID = E FIM .

    PARA            reduce using rule 18 (assign -> VAR VARID = E FIM .)
    VAR             reduce using rule 18 (assign -> VAR VARID = E FIM .)
    ESCREVE         reduce using rule 18 (assign -> VAR VARID = E FIM .)
    $end            reduce using rule 18 (assign -> VAR VARID = E FIM .)
    FIMPARA         reduce using rule 18 (assign -> VAR VARID = E FIM .)


state 37

    (16) instruction -> PARA VARID EM RANGE FAZER block . FIMPARA FIM
    (2) block -> block . instruction
    (4) instruction -> . assign
    (5) instruction -> . declare_var
    (6) instruction -> . print
    (16) instruction -> . PARA VARID EM RANGE FAZER block FIMPARA FIM
    (18) assign -> . VAR VARID = E FIM
    (17) declare_var -> . VAR VARID FIM
    (7) print -> . ESCREVE E FIM
    (8) print -> . ESCREVE STRING FIM

    FIMPARA         shift and go to state 38
    PARA            shift and go to state 7
    VAR             shift and go to state 8
    ESCREVE         shift and go to state 9

    instruction                    shift and go to state 10
    assign                         shift and go to state 4
    declare_var                    shift and go to state 5
    print                          shift and go to state 6

state 38

    (16) instruction -> PARA VARID EM RANGE FAZER block FIMPARA . FIM

    FIM             shift and go to state 39


state 39

    (16) instruction -> PARA VARID EM RANGE FAZER block FIMPARA FIM .

    PARA            reduce using rule 16 (instruction -> PARA VARID EM RANGE FAZER block FIMPARA FIM .)
    VAR             reduce using rule 16 (instruction -> PARA VARID EM RANGE FAZER block FIMPARA FIM .)
    ESCREVE         reduce using rule 16 (instruction -> PARA VARID EM RANGE FAZER block FIMPARA FIM .)
    $end            reduce using rule 16 (instruction -> PARA VARID EM RANGE FAZER block FIMPARA FIM .)
    FIMPARA         reduce using rule 16 (instruction -> PARA VARID EM RANGE FAZER block FIMPARA FIM .)

