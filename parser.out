Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> block
Rule 1     block -> instruction block
Rule 2     block -> instruction
Rule 3     instruction -> assign
Rule 4     instruction -> declare_var
Rule 5     initial -> comando
Rule 6     initial -> assign
Rule 7     initial -> declare_var
Rule 8     comando -> ESCREVE lista_strings FIM
Rule 9     E -> E + E
Rule 10    E -> E - E
Rule 11    E -> E * E
Rule 12    E -> - E
Rule 13    E -> ( E )
Rule 14    E -> NUM
Rule 15    E -> VARID
Rule 16    lista_strings -> lista_strings SEPARADOR E
Rule 17    lista_strings -> lista_strings SEPARADOR NUM
Rule 18    lista_strings -> lista_strings SEPARADOR STRING
Rule 19    lista_strings -> STRING
Rule 20    lista_strings -> NUM
Rule 21    lista_strings -> E
Rule 22    instruction -> PARA VARID EM RANGE FAZER block FIMPARA FIM
Rule 23    INST -> INST initial
Rule 24    INST -> initial
Rule 25    declare_var -> VAR VARID FIM
Rule 26    assign -> VAR VARID = E FIM

Terminals, with rules where they appear

(                    : 13
)                    : 13
*                    : 11
+                    : 9
-                    : 10 12
=                    : 26
EM                   : 22
ESCREVE              : 8
FAZER                : 22
FIM                  : 8 22 25 26
FIMPARA              : 22
NUM                  : 14 17 20
PARA                 : 22
RANGE                : 22
SEPARADOR            : 16 17 18
STRING               : 18 19
VAR                  : 25 26
VARID                : 15 22 25 26
error                : 

Nonterminals, with rules where they appear

E                    : 9 9 10 10 11 11 12 13 16 21 26
INST                 : 23
assign               : 3 6
block                : 1 22 0
comando              : 5
declare_var          : 4 7
initial              : 23 24
instruction          : 1 2
lista_strings        : 8 16 17 18

Parsing method: LALR

state 0

    (0) S' -> . block
    (1) block -> . instruction block
    (2) block -> . instruction
    (3) instruction -> . assign
    (4) instruction -> . declare_var
    (22) instruction -> . PARA VARID EM RANGE FAZER block FIMPARA FIM
    (26) assign -> . VAR VARID = E FIM
    (25) declare_var -> . VAR VARID FIM

    PARA            shift and go to state 5
    VAR             shift and go to state 6

    block                          shift and go to state 1
    instruction                    shift and go to state 2
    assign                         shift and go to state 3
    declare_var                    shift and go to state 4

state 1

    (0) S' -> block .



state 2

    (1) block -> instruction . block
    (2) block -> instruction .
    (1) block -> . instruction block
    (2) block -> . instruction
    (3) instruction -> . assign
    (4) instruction -> . declare_var
    (22) instruction -> . PARA VARID EM RANGE FAZER block FIMPARA FIM
    (26) assign -> . VAR VARID = E FIM
    (25) declare_var -> . VAR VARID FIM

    $end            reduce using rule 2 (block -> instruction .)
    FIMPARA         reduce using rule 2 (block -> instruction .)
    PARA            shift and go to state 5
    VAR             shift and go to state 6

    instruction                    shift and go to state 2
    block                          shift and go to state 7
    assign                         shift and go to state 3
    declare_var                    shift and go to state 4

state 3

    (3) instruction -> assign .

    PARA            reduce using rule 3 (instruction -> assign .)
    VAR             reduce using rule 3 (instruction -> assign .)
    $end            reduce using rule 3 (instruction -> assign .)
    FIMPARA         reduce using rule 3 (instruction -> assign .)


state 4

    (4) instruction -> declare_var .

    PARA            reduce using rule 4 (instruction -> declare_var .)
    VAR             reduce using rule 4 (instruction -> declare_var .)
    $end            reduce using rule 4 (instruction -> declare_var .)
    FIMPARA         reduce using rule 4 (instruction -> declare_var .)


state 5

    (22) instruction -> PARA . VARID EM RANGE FAZER block FIMPARA FIM

    VARID           shift and go to state 8


state 6

    (26) assign -> VAR . VARID = E FIM
    (25) declare_var -> VAR . VARID FIM

    VARID           shift and go to state 9


state 7

    (1) block -> instruction block .

    $end            reduce using rule 1 (block -> instruction block .)
    FIMPARA         reduce using rule 1 (block -> instruction block .)


state 8

    (22) instruction -> PARA VARID . EM RANGE FAZER block FIMPARA FIM

    EM              shift and go to state 10


state 9

    (26) assign -> VAR VARID . = E FIM
    (25) declare_var -> VAR VARID . FIM

    =               shift and go to state 11
    FIM             shift and go to state 12


state 10

    (22) instruction -> PARA VARID EM . RANGE FAZER block FIMPARA FIM

    RANGE           shift and go to state 13


state 11

    (26) assign -> VAR VARID = . E FIM
    (9) E -> . E + E
    (10) E -> . E - E
    (11) E -> . E * E
    (12) E -> . - E
    (13) E -> . ( E )
    (14) E -> . NUM
    (15) E -> . VARID

    -               shift and go to state 16
    (               shift and go to state 17
    NUM             shift and go to state 18
    VARID           shift and go to state 14

    E                              shift and go to state 15

state 12

    (25) declare_var -> VAR VARID FIM .

    PARA            reduce using rule 25 (declare_var -> VAR VARID FIM .)
    VAR             reduce using rule 25 (declare_var -> VAR VARID FIM .)
    $end            reduce using rule 25 (declare_var -> VAR VARID FIM .)
    FIMPARA         reduce using rule 25 (declare_var -> VAR VARID FIM .)


state 13

    (22) instruction -> PARA VARID EM RANGE . FAZER block FIMPARA FIM

    FAZER           shift and go to state 19


state 14

    (15) E -> VARID .

    FIM             reduce using rule 15 (E -> VARID .)
    +               reduce using rule 15 (E -> VARID .)
    -               reduce using rule 15 (E -> VARID .)
    *               reduce using rule 15 (E -> VARID .)
    )               reduce using rule 15 (E -> VARID .)


state 15

    (26) assign -> VAR VARID = E . FIM
    (9) E -> E . + E
    (10) E -> E . - E
    (11) E -> E . * E

    FIM             shift and go to state 20
    +               shift and go to state 21
    -               shift and go to state 22
    *               shift and go to state 23


state 16

    (12) E -> - . E
    (9) E -> . E + E
    (10) E -> . E - E
    (11) E -> . E * E
    (12) E -> . - E
    (13) E -> . ( E )
    (14) E -> . NUM
    (15) E -> . VARID

    -               shift and go to state 16
    (               shift and go to state 17
    NUM             shift and go to state 18
    VARID           shift and go to state 14

    E                              shift and go to state 24

state 17

    (13) E -> ( . E )
    (9) E -> . E + E
    (10) E -> . E - E
    (11) E -> . E * E
    (12) E -> . - E
    (13) E -> . ( E )
    (14) E -> . NUM
    (15) E -> . VARID

    -               shift and go to state 16
    (               shift and go to state 17
    NUM             shift and go to state 18
    VARID           shift and go to state 14

    E                              shift and go to state 25

state 18

    (14) E -> NUM .

    FIM             reduce using rule 14 (E -> NUM .)
    +               reduce using rule 14 (E -> NUM .)
    -               reduce using rule 14 (E -> NUM .)
    *               reduce using rule 14 (E -> NUM .)
    )               reduce using rule 14 (E -> NUM .)


state 19

    (22) instruction -> PARA VARID EM RANGE FAZER . block FIMPARA FIM
    (1) block -> . instruction block
    (2) block -> . instruction
    (3) instruction -> . assign
    (4) instruction -> . declare_var
    (22) instruction -> . PARA VARID EM RANGE FAZER block FIMPARA FIM
    (26) assign -> . VAR VARID = E FIM
    (25) declare_var -> . VAR VARID FIM

    PARA            shift and go to state 5
    VAR             shift and go to state 6

    block                          shift and go to state 26
    instruction                    shift and go to state 2
    assign                         shift and go to state 3
    declare_var                    shift and go to state 4

state 20

    (26) assign -> VAR VARID = E FIM .

    PARA            reduce using rule 26 (assign -> VAR VARID = E FIM .)
    VAR             reduce using rule 26 (assign -> VAR VARID = E FIM .)
    $end            reduce using rule 26 (assign -> VAR VARID = E FIM .)
    FIMPARA         reduce using rule 26 (assign -> VAR VARID = E FIM .)


state 21

    (9) E -> E + . E
    (9) E -> . E + E
    (10) E -> . E - E
    (11) E -> . E * E
    (12) E -> . - E
    (13) E -> . ( E )
    (14) E -> . NUM
    (15) E -> . VARID

    -               shift and go to state 16
    (               shift and go to state 17
    NUM             shift and go to state 18
    VARID           shift and go to state 14

    E                              shift and go to state 27

state 22

    (10) E -> E - . E
    (9) E -> . E + E
    (10) E -> . E - E
    (11) E -> . E * E
    (12) E -> . - E
    (13) E -> . ( E )
    (14) E -> . NUM
    (15) E -> . VARID

    -               shift and go to state 16
    (               shift and go to state 17
    NUM             shift and go to state 18
    VARID           shift and go to state 14

    E                              shift and go to state 28

state 23

    (11) E -> E * . E
    (9) E -> . E + E
    (10) E -> . E - E
    (11) E -> . E * E
    (12) E -> . - E
    (13) E -> . ( E )
    (14) E -> . NUM
    (15) E -> . VARID

    -               shift and go to state 16
    (               shift and go to state 17
    NUM             shift and go to state 18
    VARID           shift and go to state 14

    E                              shift and go to state 29

state 24

    (12) E -> - E .
    (9) E -> E . + E
    (10) E -> E . - E
    (11) E -> E . * E

    FIM             reduce using rule 12 (E -> - E .)
    +               reduce using rule 12 (E -> - E .)
    -               reduce using rule 12 (E -> - E .)
    *               reduce using rule 12 (E -> - E .)
    )               reduce using rule 12 (E -> - E .)

  ! +               [ shift and go to state 21 ]
  ! -               [ shift and go to state 22 ]
  ! *               [ shift and go to state 23 ]


state 25

    (13) E -> ( E . )
    (9) E -> E . + E
    (10) E -> E . - E
    (11) E -> E . * E

    )               shift and go to state 30
    +               shift and go to state 21
    -               shift and go to state 22
    *               shift and go to state 23


state 26

    (22) instruction -> PARA VARID EM RANGE FAZER block . FIMPARA FIM

    FIMPARA         shift and go to state 31


state 27

    (9) E -> E + E .
    (9) E -> E . + E
    (10) E -> E . - E
    (11) E -> E . * E

    FIM             reduce using rule 9 (E -> E + E .)
    +               reduce using rule 9 (E -> E + E .)
    -               reduce using rule 9 (E -> E + E .)
    )               reduce using rule 9 (E -> E + E .)
    *               shift and go to state 23

  ! *               [ reduce using rule 9 (E -> E + E .) ]
  ! +               [ shift and go to state 21 ]
  ! -               [ shift and go to state 22 ]


state 28

    (10) E -> E - E .
    (9) E -> E . + E
    (10) E -> E . - E
    (11) E -> E . * E

    FIM             reduce using rule 10 (E -> E - E .)
    +               reduce using rule 10 (E -> E - E .)
    -               reduce using rule 10 (E -> E - E .)
    )               reduce using rule 10 (E -> E - E .)
    *               shift and go to state 23

  ! *               [ reduce using rule 10 (E -> E - E .) ]
  ! +               [ shift and go to state 21 ]
  ! -               [ shift and go to state 22 ]


state 29

    (11) E -> E * E .
    (9) E -> E . + E
    (10) E -> E . - E
    (11) E -> E . * E

    FIM             reduce using rule 11 (E -> E * E .)
    +               reduce using rule 11 (E -> E * E .)
    -               reduce using rule 11 (E -> E * E .)
    *               reduce using rule 11 (E -> E * E .)
    )               reduce using rule 11 (E -> E * E .)

  ! +               [ shift and go to state 21 ]
  ! -               [ shift and go to state 22 ]
  ! *               [ shift and go to state 23 ]


state 30

    (13) E -> ( E ) .

    FIM             reduce using rule 13 (E -> ( E ) .)
    +               reduce using rule 13 (E -> ( E ) .)
    -               reduce using rule 13 (E -> ( E ) .)
    *               reduce using rule 13 (E -> ( E ) .)
    )               reduce using rule 13 (E -> ( E ) .)


state 31

    (22) instruction -> PARA VARID EM RANGE FAZER block FIMPARA . FIM

    FIM             shift and go to state 32


state 32

    (22) instruction -> PARA VARID EM RANGE FAZER block FIMPARA FIM .

    PARA            reduce using rule 22 (instruction -> PARA VARID EM RANGE FAZER block FIMPARA FIM .)
    VAR             reduce using rule 22 (instruction -> PARA VARID EM RANGE FAZER block FIMPARA FIM .)
    $end            reduce using rule 22 (instruction -> PARA VARID EM RANGE FAZER block FIMPARA FIM .)
    FIMPARA         reduce using rule 22 (instruction -> PARA VARID EM RANGE FAZER block FIMPARA FIM .)

